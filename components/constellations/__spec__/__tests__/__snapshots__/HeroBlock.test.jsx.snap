// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/constellations/HeroBlock renders a <HeroBlock /> 1`] = `
.c0 {
  padding: 50px;
  background: linear-gradient( rgba(0,0,0,0.45), rgba(0,0,0,0.45) ),  url("/imgSrc");
  background-size: cover;
  background-position: center;
  height: calc(100vh - 98px);
}

.c1 {
  box-sizing: border-box;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  -webkit-align-self: auto;
  -ms-flex-item-align: auto;
  align-self: auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  margin-left: -0;
  margin-right: -0;
}

.c2 {
  box-sizing: border-box;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding: 0;
  -webkit-align-content: flex-start;
  -ms-flex-line-pack: start;
  align-content: flex-start;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-align-self: auto;
  -ms-flex-item-align: auto;
  align-self: auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c3 {
  color: #FFFFFF;
  font-family: 'Raleway',sans-serif;
  font-weight: 800;
  font-size: 36px;
  line-height: normal;
  margin: 0 0 32px;
}

.c4 {
  color: #FFFFFF;
  font-family: 'Lato',sans-serif;
  font-weight: normal;
  font-size: 24px;
  line-height: normal;
  text-align: left;
  margin: 0 0 32px;
}

.c5 {
  color: #1C104E;
  font-family: 'Raleway',sans-serif;
  font-weight: 800;
  font-size: 16px;
  line-height: 1;
  margin: 0 0 32px;
  background-color: #FFFFFF;
  display: inline-block;
  padding: 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

@media (min-width:62em) {
  .c0 {
    padding: 100px;
  }
}

@media (min-width:0) {
  .c2 {
    -webkit-flex-basis: 100%;
    -ms-flex-preferred-size: 100%;
    flex-basis: 100%;
    max-width: 100%;
  }
}

@media (min-width:62em) {
  .c2 {
    -webkit-flex-basis: 50%;
    -ms-flex-preferred-size: 50%;
    flex-basis: 50%;
    max-width: 50%;
  }
}

<withStyles
  body="The bear is super cool and everyone loves him! Click below to find out more!"
  className=""
  cta={
    Object {
      "external": true,
      "text": "Google",
      "url": "/register",
    }
  }
  headline="Check out the bear!"
  imageAlign="right"
  imgSrc="/imgSrc"
  textAlign="left"
>
  <StyledComponent
    body="The bear is super cool and everyone loves him! Click below to find out more!"
    className=""
    cta={
      Object {
        "external": true,
        "text": "Google",
        "url": "/register",
      }
    }
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "withStyles-u5urts-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "defaultProps": Object {
          "className": "",
        },
        "displayName": "withStyles",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "body": [Function],
          "className": [Function],
          "cta": [Function],
          "headline": [Function],
          "imgSrc": [Function],
        },
        "render": [Function],
        "styledComponentId": "withStyles-u5urts-0",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    headline="Check out the bear!"
    imageAlign="right"
    imgSrc="/imgSrc"
    textAlign="left"
  >
    <Component
      body="The bear is super cool and everyone loves him! Click below to find out more!"
      className="c0"
      cta={
        Object {
          "external": true,
          "text": "Google",
          "url": "/register",
        }
      }
      headline="Check out the bear!"
      imageAlign="right"
      imgSrc="/imgSrc"
      textAlign="left"
    >
      <withStyles
        alignContent="center"
        className="c0"
        gutter="0"
        justifyContent="start"
      >
        <StyledComponent
          alignContent="center"
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "withStyles-u5urts-0",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  [Function],
                ],
              },
              "displayName": "withStyles",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "withStyles-u5urts-0",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          gutter="0"
          justifyContent="start"
        >
          <div
            className="c0 withStyles-u5urts-0 c1"
          >
            <withProps(withStyles)
              alignItems="start"
              background={false}
              body="The bear is super cool and everyone loves him! Click below to find out more!"
              className=""
              cta={
                Object {
                  "external": true,
                  "text": "Google",
                  "type": "secondary",
                  "url": "/register",
                }
              }
              gutter="0"
              headline="Check out the bear!"
              inverted={true}
              lg={0.5}
              textAlign="left"
              xs={1}
            >
              <withStyles
                HeaderComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "withStyles-u5urts-0",
                      "isStatic": false,
                      "lastClassName": "c3",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "withStyles",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "withStyles-u5urts-0",
                    "target": "h1",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                alignItems="start"
                background={false}
                body="The bear is super cool and everyone loves him! Click below to find out more!"
                className=""
                cta={
                  Object {
                    "external": true,
                    "text": "Google",
                    "type": "secondary",
                    "url": "/register",
                  }
                }
                gutter="0"
                headline="Check out the bear!"
                inverted={true}
                justifyContent="center"
                lg={0.5}
                textAlign="left"
                xs={1}
              >
                <StyledComponent
                  HeaderComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "withStyles-u5urts-0",
                        "isStatic": false,
                        "lastClassName": "c3",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "withStyles",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "withStyles-u5urts-0",
                      "target": "h1",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  alignItems="start"
                  background={false}
                  body="The bear is super cool and everyone loves him! Click below to find out more!"
                  className=""
                  cta={
                    Object {
                      "external": true,
                      "text": "Google",
                      "type": "secondary",
                      "url": "/register",
                    }
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "withStyles-u5urts-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "withStyles",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "withStyles-u5urts-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  gutter="0"
                  headline="Check out the bear!"
                  inverted={true}
                  justifyContent="center"
                  lg={0.5}
                  textAlign="left"
                  xs={1}
                >
                  <Component
                    HeaderComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "withStyles-u5urts-0",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "withStyles",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "withStyles-u5urts-0",
                        "target": "h1",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    alignItems="start"
                    background={false}
                    body="The bear is super cool and everyone loves him! Click below to find out more!"
                    className="c2"
                    cta={
                      Object {
                        "external": true,
                        "text": "Google",
                        "type": "secondary",
                        "url": "/register",
                      }
                    }
                    gutter="0"
                    headline="Check out the bear!"
                    inverted={true}
                    justifyContent="center"
                    lg={0.5}
                    textAlign="left"
                    xs={1}
                  >
                    <div
                      className="c2"
                    >
                      <withStyles>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "withStyles-u5urts-0",
                                "isStatic": false,
                                "lastClassName": "c3",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "withStyles",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "withStyles-u5urts-0",
                              "target": "h1",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <h1
                            className="c3"
                          >
                            Check out the bear!
                          </h1>
                        </StyledComponent>
                      </withStyles>
                      <withStyles
                        align="left"
                        inverted={true}
                        textAlign="left"
                      >
                        <StyledComponent
                          align="left"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "withStyles-u5urts-0",
                                "isStatic": false,
                                "lastClassName": "c4",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "defaultProps": Object {
                                "inverted": false,
                                "textAlign": "left",
                              },
                              "displayName": "withStyles",
                              "foldedComponentIds": Array [],
                              "propTypes": Object {
                                "inverted": [Function],
                                "textAlign": [Function],
                              },
                              "render": [Function],
                              "renderers": Object {
                                "blockquote": "blockquote",
                                "break": "br",
                                "code": [Function],
                                "definition": [Function],
                                "delete": "del",
                                "emphasis": "em",
                                "heading": [Function],
                                "html": [Function],
                                "image": "img",
                                "imageReference": "img",
                                "inlineCode": [Function],
                                "link": "a",
                                "linkReference": "a",
                                "list": [Function],
                                "listItem": [Function],
                                "paragraph": "p",
                                "parsedHtml": [Function],
                                "root": [Function],
                                "strong": "strong",
                                "table": [Function],
                                "tableBody": [Function],
                                "tableCell": [Function],
                                "tableHead": [Function],
                                "tableRow": [Function],
                                "text": [Function],
                                "thematicBreak": "hr",
                                "virtualHtml": [Function],
                              },
                              "styledComponentId": "withStyles-u5urts-0",
                              "target": [Function],
                              "toString": [Function],
                              "types": Array [
                                "break",
                                "paragraph",
                                "emphasis",
                                "strong",
                                "thematicBreak",
                                "blockquote",
                                "delete",
                                "link",
                                "image",
                                "linkReference",
                                "imageReference",
                                "table",
                                "tableHead",
                                "tableBody",
                                "tableRow",
                                "tableCell",
                                "root",
                                "text",
                                "list",
                                "listItem",
                                "definition",
                                "heading",
                                "inlineCode",
                                "code",
                                "html",
                                "virtualHtml",
                                "parsedHtml",
                              ],
                              "uriTransformer": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          inverted={true}
                          textAlign="left"
                        >
                          <ReactMarkdown
                            align="left"
                            astPlugins={Array []}
                            className="c4"
                            escapeHtml={true}
                            inverted={true}
                            plugins={Array []}
                            rawSourcePos={false}
                            renderers={Object {}}
                            skipHtml={false}
                            sourcePos={false}
                            textAlign="left"
                            transformLinkUri={[Function]}
                          >
                            <Root
                              className="c4"
                              key="root-1-1"
                            >
                              <div
                                className="c4"
                              >
                                <p
                                  key="paragraph-1-1"
                                >
                                  <TextRenderer
                                    key="text-1-1"
                                    nodeKey="text-1-1"
                                    value="The bear is super cool and everyone loves him! Click below to find out more!"
                                  >
                                    The bear is super cool and everyone loves him! Click below to find out more!
                                  </TextRenderer>
                                </p>
                              </div>
                            </Root>
                          </ReactMarkdown>
                        </StyledComponent>
                      </withStyles>
                      <branch(withStyles)
                        external={true}
                        text="Google"
                        type="secondary"
                        url="/register"
                      >
                        <withStyles
                          className=""
                          external={true}
                          onClick={null}
                          text="Google"
                          type="secondary"
                          url="/register"
                        >
                          <StyledComponent
                            className=""
                            external={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "withStyles-u5urts-0",
                                  "isStatic": false,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    [Function],
                                  ],
                                },
                                "defaultProps": Object {
                                  "className": "",
                                  "external": false,
                                  "onClick": null,
                                  "type": "primary",
                                  "url": null,
                                },
                                "displayName": "withStyles",
                                "foldedComponentIds": Array [],
                                "propTypes": Object {
                                  "children": [Function],
                                  "className": [Function],
                                  "external": [Function],
                                  "onClick": [Function],
                                  "type": [Function],
                                  "url": [Function],
                                },
                                "render": [Function],
                                "styledComponentId": "withStyles-u5urts-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                                Symbol(Symbol.hasInstance): [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={null}
                            text="Google"
                            type="secondary"
                            url="/register"
                          >
                            <branch(mapProps(componentFromProp(component)))
                              className="c5"
                              external={true}
                              onClick={null}
                              text="Google"
                              type="secondary"
                              url="/register"
                            >
                              <mapProps(withProps(mapProps(componentFromProp(component))))
                                className="c5"
                                external={true}
                                onClick={null}
                                text="Google"
                                type="secondary"
                                url="/register"
                              >
                                <withProps(mapProps(componentFromProp(component)))
                                  className="c5"
                                  external={true}
                                  onClick={null}
                                  text="Google"
                                  type="secondary"
                                  url="/register"
                                >
                                  <mapProps(componentFromProp(component))
                                    className="c5"
                                    component="button"
                                    external={true}
                                    onClick={null}
                                    text="Google"
                                    type="secondary"
                                    url="/register"
                                  >
                                    <componentFromProp(component)
                                      className="c5"
                                      component="button"
                                      onClick={null}
                                      text="Google"
                                      type="secondary"
                                      url="/register"
                                    >
                                      <button
                                        className="c5"
                                        onClick={null}
                                        text="Google"
                                        type="secondary"
                                        url="/register"
                                      />
                                    </componentFromProp(component)>
                                  </mapProps(componentFromProp(component))>
                                </withProps(mapProps(componentFromProp(component)))>
                              </mapProps(withProps(mapProps(componentFromProp(component))))>
                            </branch(mapProps(componentFromProp(component)))>
                          </StyledComponent>
                        </withStyles>
                      </branch(withStyles)>
                    </div>
                  </Component>
                </StyledComponent>
              </withStyles>
            </withProps(withStyles)>
          </div>
        </StyledComponent>
      </withStyles>
    </Component>
  </StyledComponent>
</withStyles>
`;
